<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
	<head>
		<meta http-equiv="content-type" content="text/html; charset={+IO.encoding+}" />
		<meta name="generator" content="JsDoc Toolkit" />
		{! Link.base = "../"; /* all generated links will be relative to this */ !}
		<title>JsDoc Reference - {+data.alias+}</title>

        <link rel="stylesheet" href="../static/{+JSDOC.opt.D.cssFile+}" type="text/css" media="screen" charset="utf-8" />
	</head>

	<body>
<!-- ============================== header ================================= -->	
		<!-- begin static/header.html -->
		{+include("header.html")+}
		<!-- end static/header.html -->

        {!
            var classType = "";
            
            if (data.isBuiltin()) {
                classType += "Built-In ";
            }
            
            if (data.isNamespace) {
                if (data.is('FUNCTION')) {
                    classType += "Function ";
                }
                classType += "Namespace ";
            }
            else {
                classType += "Class ";
            }
        !}

<!-- ============================== classes index ============================ -->
		<div id="index">
            <div id="docs">
                {+publish.docsIndex+}
            </div>
			{+publish.classesIndex+}
		</div>
		
        <div id="symbolList">
           <!-- constructor list -->
           <if test="!data.isBuiltin() && (data.isNamespace || data.is('CONSTRUCTOR'))">
             <h3>
                 {+classType+}
             </h3>
             <ul>
                <li {! if(data.comment.getTag("hilited").length){ output += 'style="color: red"'; }!}>
                  {+ 
                      /* new Link().toSymbol(data.alias).inner('constructor') */
                      new Link().toSymbol(data.alias).withText(data.name)
                  +}
                </li>
             </ul>
           </if>
           <!-- end constructor list -->

           <!-- properties list -->
           {! var ownProperties = data.properties.filter(function($){return $.memberOf == data.alias && !$.isNamespace}).sort(makeSortby("name")); !}
           <if test="ownProperties.length">
             <h3>{+ data.isNamespace ? "Variables" : "Fields" +}</h3>
             <ul>
               <for each="member" in="ownProperties">
                 <li>
                   {+new Link().toSymbol(member.alias).withText(member.name)+}
                 </li>
               </for>
             </ul>
           </if>
           <!-- end properties list -->

           <!-- function summary -->
           {! var ownMethods = data.methods.filter(function($){return $.memberOf == data.alias  && !$.isNamespace}).sort(makeSortby("name")); !}
           <if test="ownMethods.length">
             <h3>{+ data.isNamespace ? "Functions" : "Methods" +}</h3>
             <ul>
               <for each="member" in="ownMethods">
                   <li>
                        {+new Link().toSymbol(member.alias).withText(member.name)+}
                    </li>
               </for>
             </ul>
           </if>
           <!-- end function summary -->

           <!-- events summary -->
           {! var ownEvents = data.events.filter(function($){return $.memberOf == data.alias  && !$.isNamespace}).sort(makeSortby("name")); !}
           <if test="ownEvents.length">
             <h3>Events</h3>
             <ul>
               <for each="member" in="ownEvents">
                 <li class="fixedFont"> {+new Link().toSymbol(member.alias).withText(member.name)+} </li>
               </for>
             </ul>
           </if>
           <!-- end events summary -->
        </div>

		<div id="content">
<!-- ============================== class title ============================ -->
			<h1 class="classTitle">
				{+classType+}{+data.alias+}
			</h1>

<!-- ============================== class summary ========================== -->			
			<p class="description">
				<if test="data.version"><br />Version
					{+ data.version +}.<br />
				</if>
				<if test="data.augments.length"><br />Extends
					{+
						data.augments
						.sort()
						.map(
							function($) { return new Link().toSymbol($); }
						)
						.join(", ")
					+}.<br />

                    <if test="data.properties.length && data.inheritsFrom.length">
                        <dl class="inheritsList">
                        {!
                            var borrowedMembers = data.properties.filter(function($) {return $.memberOf != data.alias});
                            
                            var contributers = [];
                            borrowedMembers.map(function($) {if (contributers.indexOf($.memberOf) < 0) contributers.push($.memberOf)});
                            for (var i = 0, l = contributers.length; i < l; i++) {
                                output +=
                                    "<dt>Fields borrowed from class "+new Link().toSymbol(contributers[i])+": </dt>"
                                    +
                                    "<dd>" +
                                    borrowedMembers
                                    .filter(
                                        function($) { return $.memberOf == contributers[i] }
                                    )
                                    .sort(makeSortby("name"))
                                    .map(
                                        function($) { return new Link().toSymbol($.alias).withText($.name) }
                                    )
                                    .join(", ")
                                    +
                                    "</dd>";
                            }
                        !}
                        </dl>
                    </if>

                    <if test="data.methods.length && data.inheritsFrom.length">
                        <dl class="inheritsList">
                        {!
                            var borrowedMembers = data.methods.filter(function($) {return $.memberOf != data.alias});
                            var contributers = [];
                            borrowedMembers.map(function($) {if (contributers.indexOf($.memberOf) < 0) contributers.push($.memberOf)});
                            for (var i = 0, l = contributers.length; i < l; i++) {
                                output +=
                                    "<dt>Methods borrowed from class "+new Link().toSymbol(contributers[i])+": </dt>"
                                    +
                                    "<dd>" +
                                    borrowedMembers
                                    .filter(
                                        function($) { return $.memberOf == contributers[i] }
                                    )
                                    .sort(makeSortby("name"))
                                    .map(
                                        function($) { return new Link().toSymbol($.alias).withText($.name) }
                                    )
                                    .join(", ")
                                    +
                                    "</dd>";
                            }
                        
                        !}
                        </dl>
                    </if>

                    <if test="data.events.length && data.inheritsFrom.length">
                        <dl class="inheritsList">
                        {!
                            var borrowedMembers = data.events.filter(function($) {return $.memberOf != data.alias});
                            var contributers = [];
                            borrowedMembers.map(function($) {if (contributers.indexOf($.memberOf) < 0) contributers.push($.memberOf)});
                            for (var i = 0, l = contributers.length; i < l; i++) {
                                output +=
                                    "<dt>Events borrowed from class "+new Link().toSymbol(contributers[i])+": </dt>"
                                    +
                                    "<dd>" +
                                    borrowedMembers
                                    .filter(
                                        function($) { return $.memberOf == contributers[i] }
                                    )
                                    .sort(makeSortby("name"))
                                    .map(
                                        function($) { return new Link().toSymbol($.alias).withText($.name) }
                                    )
                                    .join(", ")
                                    +
                                    "</dd>";
                            }
                        
                        !}
                        </dl>
                    </if>

				</if>
			
				{+resolveLinks(data.classDesc)+}
				
				<if test="!data.isBuiltin()">{# isn't defined in any file #}
					<br /><i>Defined in: </i> {+new Link().toSrc(data.srcFile)+}.
				</if>
			</p>

<!-- ============================== constructor details ==================== -->		
			<if test="!data.isBuiltin() && (data.isNamespace || data.is('CONSTRUCTOR'))">
			<div class="details"><a name="constructor"> </a>
				<div class="sectionTitle">
					{+classType+}Detail
				</div>
				
				<div class="fixedFont">{!
					if (data.isPrivate) output += "&lt;private&gt; ";
					if (data.isInner) output += "&lt;inner&gt; ";
				!}
						<b>{+ data.alias +}</b><if test="classType != 'Namespace '">{+ makeSignature(data.params) +}</if>
				</div>
				
				<div class="description">
					{+markdownConverter.makeHtml(resolveLinks(data.desc))+}
					<if test="data.author"><br /><i>Author: </i>{+data.author+}.</if>
				</div>
				
				<if test="data.example.length">
				<for each="example" in="data.example">
				<pre class="code">{+example+}</pre>
				</for>
				</if>
				
				
					<if test="data.params.length">
						<dl class="detailList">
						<dt class="heading">Parameters:</dt>
						<for each="item" in="data.params">
							<dt>
								{+((item.type)?""+("<span class=\"light fixedFont\">{"+(new Link().toSymbol(item.type)+"}</span> ")) : "")+} <b>{+item.name+}</b>
								<if test="item.isOptional"><i>Optional<if test="item.defaultValue">, Default: {+item.defaultValue+}</if></i></if>
							</dt>
								<dd>{+resolveLinks(item.desc)+}</dd>
						</for>
						</dl>
					</if>
					<if test="data.deprecated">
						<dl class="detailList">
						<dt class="heading">Deprecated:</dt>
						<dt>
							{+resolveLinks(data.deprecated)+}
						</dt>
						</dl>
					</if>
					<if test="data.since">
						<dl class="detailList">
						<dt class="heading">Since:</dt>
							<dd>{+ data.since +}</dd>
						</dl>
					</if>
					<if test="data.exceptions.length">
						<dl class="detailList">
						<dt class="heading">Throws:</dt>
						<for each="item" in="data.exceptions">
							<dt>
								{+((item.type)?"<span class=\"light fixedFont\">{"+(new Link().toSymbol(item.type))+"}</span> " : "")+} <b>{+item.name+}</b>
							</dt>
								<dd>{+resolveLinks(item.desc)+}</dd>
						</for>
						</dl>
					</if>
					<if test="data.returns.length">
						<dl class="detailList">
						<dt class="heading">Returns:</dt>
						<for each="item" in="data.returns">
								<dd>{+((item.type)?"<span class=\"light fixedFont\">{"+(new Link().toSymbol(item.type))+"}</span> " : "")+}{+resolveLinks(item.desc)+}</dd>
						</for>
						</dl>
					</if>
					<if test="data.requires.length">
						<dl class="detailList">
						<dt class="heading">Requires:</dt>
						<for each="item" in="data.requires">
							<dd>{+ resolveLinks(item) +}</dd>
						</for>
						</dl>
					</if>
					<if test="data.see.length">
						<dl class="detailList">
						<dt class="heading">See:</dt>
						<for each="item" in="data.see">
							<dd>{+ new Link().toSymbol(item) +}</dd>
						</for>
						</dl>
					</if>

			</div>
			</if>

<!-- ============================== field details ========================== -->		
			<if test="defined(ownProperties) && ownProperties.length">
              <div class="details">
				<div class="sectionTitle">
					Field Detail
				</div>
				<for each="member" in="ownProperties">
                  <div class="member">
					<a name="{+Link.symbolNameToLinkName(member)+}"> </a>
					<div class="fixedFont">
                      <div class="modifiers">{!
						if (member.isPrivate) output += "&lt;private&gt; ";
						if (member.isInner) output += "&lt;inner&gt; ";
						if (member.isStatic) output += "&lt;static&gt; ";
						if (member.isConstant) output += "&lt;constant&gt; ";
					  !}
                      </div>
					
					<if test="member.type"><span class="light">{{+new Link().toSymbol(member.type)+}}</span></if>
					<if test="member.isStatic && member.memberOf != '_global_'"><span class="light">{+member.memberOf+}.</span></if><b>{+member.name+}</b>
					
					</div>
					<div class="description">
						{+markdownConverter.makeHtml(resolveLinks(member.desc))+}
						<if test="member.srcFile != data.srcFile">
							<br />
							<i>Defined in: </i> {+new Link().toSrc(member.srcFile)+}.
						</if>
						<if test="member.author"><br /><i>Author: </i>{+member.author+}.</if>
					</div>
					
					<if test="member.example.length">
					<for each="example" in="member.example">
					<pre class="code">{+example+}</pre>
					</for>
					</if>

						<if test="member.deprecated">
							<dl class="detailList">
							<dt class="heading">Deprecated:</dt>
							<dt>
								{+ resolveLinks(member.deprecated) +}
							</dt>
							</dl>
						</if>
						<if test="member.since">
							<dl class="detailList">
							<dt class="heading">Since:</dt>
								<dd>{+ member.since +}</dd>
							</dl>
						</if>
						<if test="member.see.length">
							<dl class="detailList">
							<dt class="heading">See:</dt>
							<for each="item" in="member.see">
							<dd>{+ new Link().toSymbol(item) +}</dd>
							</for>
							</dl>
						</if>
						<if test="member.defaultValue">
							<dl class="detailList">
							<dt class="heading">Default Value:</dt>
							<dd>
								{+resolveLinks(member.defaultValue)+}
							</dd>
							</dl>
						</if>
                  </div>
				</for>
              </div>
			</if>

<!-- ============================== method details ========================= -->		
			<if test="defined(ownMethods) && ownMethods.length">
              <div class="details">
				<div class="sectionTitle">
					Method Detail
				</div>
				<for each="member" in="ownMethods">
                  <div class="member">
					<a name="{+Link.symbolNameToLinkName(member)+}"> </a>
					<div class="fixedFont">
                      <div class="modifiers">{!
						if (member.isPrivate) output += "&lt;private&gt; ";
						if (member.isInner) output += "&lt;inner&gt; ";
						if (member.isStatic) output += "&lt;static&gt; ";
                        !}
                      </div>
					
					<if test="member.isStatic && member.memberOf != '_global_'"><span class="light">{+member.memberOf+}.</span></if><b>{+member.name.replace(/\^\d+$/, '')+}</b>{+makeSignature(member.params)+}
					<if test="member.type"><span class="light"> : {{+new Link().toSymbol(member.type)+}}</span></if>

					</div>
					<div class="description">
						{+markdownConverter.makeHtml(resolveLinks(member.desc))+}
						<if test="member.srcFile != data.srcFile">
							<br />
							<i>Defined in: </i> {+new Link().toSrc(member.srcFile)+}.
						</if>
						<if test="member.author"><br /><i>Author: </i>{+member.author+}.</if>
					</div>
					
					<if test="member.example.length">
					<for each="example" in="member.example">
					<pre class="code">{+example+}</pre>
					</for>
					</if>
					
						<if test="member.params.length">
							<dl class="detailList">
							<dt class="heading">Parameters:</dt>
							<for each="item" in="member.params">
								<dt>
									<code>
										{+((item.type)?"<span class=\"light fixedFont\">{"+(new Link().toSymbol(item.type))+"}</span> " : "")+}<b>{+item.name+}</b>
										<if test="item.isOptional"><i>Optional<if test="item.defaultValue"><br>Default Value: {+item.defaultValue+}</if></i></if>
									</code>
								</dt>
								<dd>{+resolveLinks(item.desc)+}</dd>
							</for>
							</dl>
						</if>
						<if test="member.deprecated">
							<dl class="detailList">
							<dt class="heading">Deprecated:</dt>
							<dt>
								{+ resolveLinks(member.deprecated) +}
							</dt>
							</dl>
						</if>
						<if test="member.since">
							<dl class="detailList">
							<dt class="heading">Since:</dt>
								<dd>{+ member.since +}</dd>
							</dl>
							</dl>
						</if>
						<if test="member.exceptions.length">
							<dl class="detailList">
							<dt class="heading">Throws:</dt>
							<for each="item" in="member.exceptions">
								<dt>
									{+((item.type)?"<span class=\"light fixedFont\">{"+(new Link().toSymbol(item.type))+"}</span> " : "")+} <b>{+item.name+}</b>
								</dt>
								<dd>{+resolveLinks(item.desc)+}</dd>
							</for>
							</dl>
						</if>
						<if test="member.returns.length">
							<dl class="detailList">
							<dt class="heading">Returns:</dt>
							<for each="item" in="member.returns">
								<dd>{+((item.type)?"<span class=\"light fixedFont\">{"+(new Link().toSymbol(item.type))+"}</span> " : "")+}{+resolveLinks(item.desc)+}</dd>
							</for>
							</dl>
						</if>
						<if test="member.requires.length">
							<dl class="detailList">
							<dt class="heading">Requires:</dt>
							<for each="item" in="member.requires">
								<dd>{+ resolveLinks(item) +}</dd>
							</for>
							</dl>
						</if>
						<if test="member.see.length">
							<dl class="detailList">
							<dt class="heading">See:</dt>
							<for each="item" in="member.see">
								<dd>{+ new Link().toSymbol(item) +}</dd>
							</for>
							</dl>
						</if>

                  </div>
				</for>
              </div>
			</if>
			
<!-- ============================== event details ========================= -->		
			<if test="defined(ownEvents) && ownEvents.length">
              <div class="details">
				<div class="sectionTitle">
					Event Detail
				</div>
				<for each="member" in="ownEvents">
                  <div class="member">
					<a name="event:{+Link.symbolNameToLinkName(member)+}"> </a>
					<div class="fixedFont">
                      <div class="modifiers">{!
						if (member.isPrivate) output += "&lt;private&gt; ";
						if (member.isInner) output += "&lt;inner&gt; ";
						if (member.isStatic) output += "&lt;static&gt; ";
                        !}
                      </div>
					
					<if test="member.type"><span class="light">{{+new Link().toSymbol(member.type)+}}</span></if>
					<if test="member.isStatic && member.memberOf != '_global_'"><span class="light">{+member.memberOf+}.</span></if><b>{+member.name+}</b>{+makeSignature(member.params)+}
					
					</div>
					<div class="description">
						{+markdownConverter.makeHtml(resolveLinks(member.desc))+}
						<if test="member.srcFile != data.srcFile">
							<br />
							<i>Defined in: </i> {+new Link().toSrc(member.srcFile)+}.
						</if>
						<if test="member.author"><br /><i>Author: </i>{+member.author+}.</if>
					</div>
					
					<if test="member.example.length">
					<for each="example" in="member.example">
					<pre class="code">{+example+}</pre>
					</for>
					</if>
					
						<if test="member.params.length">
							<dl class="detailList">
							<dt class="heading">Parameters:</dt>
							<for each="item" in="member.params">
								<dt>
									{+((item.type)?"<span class=\"light fixedFont\">{"+(new Link().toSymbol(item.type))+"}</span> " : "")+}<b>{+item.name+}</b>
									<if test="item.isOptional"><i>Optional<if test="item.defaultValue">, Default: {+item.defaultValue+}</if></i></if>
								</dt>
								<dd>{+ resolveLinks(item.desc) +}</dd>
							</for>
							</dl>
						</if>
						<if test="member.deprecated">
							<dl class="detailList">
							<dt class="heading">Deprecated:</dt>
							<dt>
								{+ resolveLinks(member.deprecated) +}
							</dt>
							</dl>
						</if>
						<if test="member.since">
							<dl class="detailList">
							<dt class="heading">Since:</dt>
								<dd>{+ member.since +}</dd>
							</dl>
							</dl>
						</if>
						<if test="member.exceptions.length">
							<dl class="detailList">
							<dt class="heading">Throws:</dt>
							<for each="item" in="member.exceptions">
								<dt>
									{+((item.type)?"<span class=\"light fixedFont\">{"+(new Link().toSymbol(item.type))+"}</span> " : "")+} <b>{+item.name+}</b>
								</dt>
								<dd>{+ resolveLinks(item.desc) +}</dd>
							</for>
							</dl>
						</if>
						<if test="member.returns.length">
							<dl class="detailList">
							<dt class="heading">Returns:</dt>
							<for each="item" in="member.returns">
								<dd>{+((item.type)?"<span class=\"light fixedFont\">{"+(new Link().toSymbol(item.type))+"}</span> " : "")+}{+resolveLinks(item.desc)+}</dd>
							</for>
							</dl>
						</if>
						<if test="member.requires.length">
							<dl class="detailList">
							<dt class="heading">Requires:</dt>
							<for each="item" in="member.requires">
								<dd>{+ resolveLinks(item) +}</dd>
							</for>
							</dl>
						</if>
						<if test="member.see.length">
							<dl class="detailList">
							<dt class="heading">See:</dt>
							<for each="item" in="member.see">
								<dd>{+ new Link().toSymbol(item) +}</dd>
							</for>
							</dl>
						</if>

                  </div>
				</for>
              </div>
			</if>
			<hr />
		</div>

		
<!-- ============================== footer ================================= -->
		<div class="fineprint" style="clear:both;text-align:center">
			<if test="JSDOC.opt.D.copyright">&copy;{+JSDOC.opt.D.copyright+}<br /></if>
			Documentation generated by <a href="http://code.google.com/p/jsdoc-toolkit/" target="_blank">JsDoc Toolkit</a> {+JSDOC.VERSION+} on {+new Date()+}
		</div>
	</body>
</html>
